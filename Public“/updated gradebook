// TODO: Fetch data from the PostgreSQL database (to be implemented later)
function fetchGradeDate () {
	// This function will query the PostgreSQL database and return grade data
	console.log("Fetching grade data...");
	//Create a new request for HTTp data
	let xhr = new XMLHttpRequest();
	//This is the address on the machine we're asking for data
	let apiRoute = "/api/grades";
	//When the request changes status, we run this anonmymous function
	xhr.onreadystatechange = function (){
		let results;
		//check if we're done
		if(xhr.readyState === xhr. done){
			//check if we're successful
			if(xhr.status !== 200){
				console.error('could not get grades.
					Status: ${xhr.status}');
			}
			// And then call the function to update the html with our data
			PopulateGradebook(JSON.parse(xhr.responseText));
		}
	}.bind(this);
	xhr.open("get", apiRoute, true);
	xhr.send();
}

// TODO: Populate the table with grade data
function PopulateGradebook(data) {
	// This function will take the fetched grade data and Populate the table
	console.log("Populating gradebook with data;",data);
	let tableElm = document.getElementById("gradebook"); //get the gradebook table Element
		data.forEach(function(assignment){ // for each row of data we're passed in 
		let row = document.createElement("tr"); // create a table row element 
		let columns = []; // Handy place to stick the columns of information
		columns.name = document. createElement('td'); // the first column's table data will be the name
		columns.name.appendChild(
		//concatenate the full name:  "last_name, first_name"
		document.createTextNode(assignment.last_name + "," + assignment.first_name)
	);
	columns.grade =document.createElement('td'); //second column will be the grade
	columns.grade.appendChild(
	// just put the name in text, you could be fancy and figure out the letter grade here
	//with either a bunch of conditions, or a javascripts "switch" statement 
	document.createTextNode(assignment.total_grade)
);
// add the table data columns to the table row
row.appendChild(columns.name);
row.appendChild(columns.grade);
//add the row to the table itself to make the data visible
tableElm.appendChild(row);
});

//TODO Remove this
//Call the stubs to demonstrate the workflow 
const gradeData= (fetchGradeDate);
PopulateGradebook(gradeData);
//End Remove